{% extends "base.jinja" %}

{% block title %}Tags - {{ recipe.site.title }}{% endblock %}

{% block content %}
<div class="tags-container">
    <h1>Tags</h1>
    <div class="search-container">
        <input type="text" id="tagSearch" placeholder="Search tags..." class="search-input" autocomplete="off">
        <div id="tagCount" class="tag-total"></div>
    </div>
    
    <div class="tags-list" id="tagsList">
        {% for tag in recipe.tags|sort %}
        <a href="./tags/{{ tag }}.html" class="tag">
            <span class="tag-name">{{ tag }}</span>
            <span class="tag-count">{{ recipe.tag_counts[tag] }}</span>
        </a>
        {% endfor %}
    </div>

    <p id="noResults" class="no-results" style="display: none;">No tags found matching your search.</p>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('tagSearch');
    const tagsList = document.getElementById('tagsList');
    const noResults = document.getElementById('noResults');
    const tagCount = document.getElementById('tagCount');
    const tags = tagsList.getElementsByClassName('tag');
    
    function updateTagCount(visibleCount, totalCount) {
        if (searchInput.value) {
            tagCount.textContent = `${visibleCount} of ${totalCount} tags`;
        } else {
            tagCount.textContent = `${totalCount} tags total`;
        }
    }

    function filterTags() {
        const searchTerm = searchInput.value.toLowerCase();
        let visibleCount = 0;
        const totalCount = tags.length;

        Array.from(tags).forEach(tag => {
            const tagName = tag.querySelector('.tag-name').textContent.toLowerCase();
            const shouldShow = tagName.includes(searchTerm);
            tag.style.display = shouldShow ? '' : 'none';
            if (shouldShow) visibleCount++;
        });

        noResults.style.display = visibleCount === 0 ? 'block' : 'none';
        updateTagCount(visibleCount, totalCount);
    }

    // Initialize tag count
    updateTagCount(tags.length, tags.length);

    // Add event listeners
    searchInput.addEventListener('input', filterTags);
    searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            searchInput.value = '';
            filterTags();
            searchInput.blur();
        }
    });
});
</script>

<style>
    :root {
        --text-color: #e2e8f0;
        --text-muted: #94a3b8;
        --tag-bg: #334155;
        --tag-bg-hover: #475569;
        --header-color: #f1f5f9;
        --input-bg: #1e293b;
        --input-border: #475569;
        --input-focus: #60a5fa;
    }

    .tags-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
    }

    .tags-container h1 {
        margin: 0;
        margin-bottom: 1rem;
        color: var(--header-color);
        font-size: 2.5rem;
        font-weight: 700;
        letter-spacing: -0.025em;
    }

    .search-container {
        position: relative;
        margin-bottom: 2rem;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .search-input {
        flex: 1;
        background: var(--input-bg);
        border: 1px solid var(--input-border);
        color: var(--text-color);
        padding: 0.75rem 1rem;
        border-radius: 0.5rem;
        font-size: 1rem;
        transition: all 0.2s ease;
        width: 100%;
    }

    .search-input:focus {
        outline: none;
        border-color: var(--input-focus);
        box-shadow: 0 0 0 2px rgba(96, 165, 250, 0.2);
    }

    .search-input::placeholder {
        color: var(--text-muted);
    }

    .tag-total {
        color: var(--text-muted);
        font-size: 0.875rem;
        white-space: nowrap;
    }

    .no-results {
        text-align: center;
        color: var(--text-muted);
        font-size: 1rem;
        margin-top: 2rem;
    }

    .tags-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
    }

    .tag {
        display: inline-flex;
        align-items: center;
        background: var(--tag-bg);
        color: var(--text-color);
        text-decoration: none;
        padding: 0.5rem 1rem;
        border-radius: 9999px;
        font-size: 0.875rem;
        transition: all 0.2s ease;
    }

    .tag:hover {
        background: var(--tag-bg-hover);
        transform: translateY(-1px);
    }

    .tag-count {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        background: rgba(0, 0, 0, 0.2);
        color: var(--text-muted);
        margin-left: 0.5rem;
        padding: 0.125rem 0.5rem;
        border-radius: 9999px;
        font-size: 0.75rem;
    }

    @media (max-width: 640px) {
        .tags-container {
            padding: 1rem;
        }

        .tags-container h1 {
            font-size: 2rem;
        }

        .search-container {
            flex-direction: column;
            align-items: stretch;
            gap: 0.5rem;
        }

        .tag-total {
            text-align: center;
        }

        .search-input {
            padding: 0.625rem 0.875rem;
            font-size: 0.9375rem;
        }

        .tag {
            padding: 0.375rem 0.75rem;
            font-size: 0.8125rem;
        }

        .tag-count {
            padding: 0.125rem 0.375rem;
            font-size: 0.6875rem;
        }
    }
</style>
{% endblock %}
